{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","tool","TOOL_NONE","value","INITIAL_VALUE","Viewer","this","fitToViewer","nextTool","setState","nextValue","fitSelection","zoomOnViewerCenter","style","width","height","src","render","content","ref","onChangeTool","changeTool","onChangeValue","changeValue","onClick","event","console","log","x","y","originalEvent","fill","stroke","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAaqBA,E,2MAEnBC,MAAQ,CAACC,KAAMC,IAAWC,MAAOC,K,EACjCC,OAAS,K,mFAGS,MAAbC,KAAKD,QACNC,KAAKD,OAAOE,gB,iCAKLC,GACTF,KAAKG,SAAS,CAACR,KAAMO,M,kCAGXE,GACVJ,KAAKG,SAAS,CAACN,MAAOO,M,oCAItBJ,KAAKG,UAAS,SAAAT,GAAK,MAAK,CAACG,MAAOI,YAAYP,EAAMG,a,qCAIlDG,KAAKG,UAAS,SAAAT,GAAK,MAAK,CAACG,MAAOQ,YAAaX,EAAMG,MAAO,GAAI,GAAI,IAAK,W,2CAIvEG,KAAKG,UAAS,SAAAT,GAAK,MAAK,CAACG,MAAOS,YAAmBZ,EAAMG,MAAO,W,+BASxD,IAAD,OACP,OACE,yBAAKU,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAClC,kBAAC,IAAD,MACI,gBAAED,EAAF,EAAEA,MAAOC,EAAT,EAASA,OAAT,OAA+B,IAAVD,GAA0B,IAAXC,EAAe,KAEvD,kBAAC,IAAD,CAAuBC,IAAI,aAAaC,OAAS,SAACC,GAAD,OAEjD,kBAAC,IAAD,CACEJ,MAAOA,EAAOC,OAAQA,EACtBI,IAAK,SAAAd,GAAM,OAAI,EAAKA,OAASA,GAC7BJ,KAAM,EAAKD,MAAMC,KAAMmB,aAAc,SAAAnB,GAAI,OAAI,EAAKoB,WAAWpB,IAC7DE,MAAO,EAAKH,MAAMG,MAAOmB,cAAe,SAAAnB,GAAK,OAAI,EAAKoB,YAAYpB,IAElEqB,QAAS,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,EAAMG,EAAGH,EAAMI,EAAGJ,EAAMK,iBAE/D,yBAAKhB,MAAO,KAAMC,OAAQ,MAC1B,2BACA,0BAAMa,EAAE,MAAMC,EAAE,MAAMf,MAAM,OAAOC,OAAO,OAAOgB,KAAK,UAAUC,OAAO,YACvE,0BAAMJ,EAAE,OAAOC,EAAE,OAAOf,MAAM,OAAOC,OAAO,OAAOgB,KAAK,UAAUC,OAAO,aAGxEd,e,GA5DsBe,IAAMC,eCDnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAO,kBAAC,EAAD,MAASwB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.53002b55.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  fitSelection,\n  fitToViewer,\n  INITIAL_VALUE,\n  ReactSVGPanZoom,\n  TOOL_NONE,\n  zoomOnViewerCenter\n} from 'react-svg-pan-zoom';\nimport {AutoSizer} from 'react-virtualized'\nimport {ReactSvgPanZoomLoader} from 'react-svg-pan-zoom-loader'\n\n/* keep attention! handling the state in the following way doesn't fire onZoom and onPam hooks */\nexport default class App extends React.PureComponent {\n\n  state = {tool: TOOL_NONE, value: INITIAL_VALUE}\n  Viewer = null\n\n  componentDidMount() {\n    if(this.Viewer!=null){\n      this.Viewer.fitToViewer();\n    }\n  }\n  \n\n  changeTool(nextTool) {\n    this.setState({tool: nextTool})\n  }\n\n  changeValue(nextValue) {\n    this.setState({value: nextValue})\n  }\n\n  fitToViewer() {\n    this.setState(state => ({value: fitToViewer(state.value)}))\n  }\n\n  fitSelection() {\n    this.setState(state => ({value: fitSelection(state.value, 40, 40, 200, 200)}))\n  }\n\n  zoomOnViewerCenter() {\n    this.setState(state => ({value: zoomOnViewerCenter(state.value, 1.1)}))\n  }\n/*\n       <AutoSizer>\n          {(({width, height}) => width === 0 || height === 0 ? null : (\n\n                  ))}\n          </AutoSizer>\n */\n  render() {\n    return (\n      <div style={{width: \"100%\", height: \"100%\"}}>\n        <AutoSizer>\n          {(({width, height}) => width === 0 || height === 0 ? null : (\n\n        <ReactSvgPanZoomLoader src=\"primes.svg\" render= {(content) => (\n\n        <ReactSVGPanZoom\n          width={width} height={height}\n          ref={Viewer => this.Viewer = Viewer}\n          tool={this.state.tool} onChangeTool={tool => this.changeTool(tool)}\n          value={this.state.value} onChangeValue={value => this.changeValue(value)}\n\n          onClick={event => console.log('click', event.x, event.y, event.originalEvent)}\n        >\n          <svg width={3480} height={3480}>\n          <g>\n          <rect x=\"740\" y=\"740\" width=\"2000\" height=\"2000\" fill=\"#a0a0a0\" stroke=\"#f4f142\"/>\n          <rect x=\"1240\" y=\"1240\" width=\"1000\" height=\"1000\" fill=\"#ffffff\" stroke=\"#f4f142\"/>\n           </g>\n\n          {content}\n          </svg>\n        </ReactSVGPanZoom>\n\n\n          )}/>\n          ))}\n          </AutoSizer>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}